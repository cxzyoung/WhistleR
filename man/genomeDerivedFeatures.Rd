% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genomeDerivedFeatures.R
\name{genomeDerivedFeatures}
\alias{genomeDerivedFeatures}
\title{Extract genome-derived predictive features for range-based annotation}
\usage{
genomeDerivedFeatures(
  x,
  transcriptdb,
  sequence = NULL,
  gscores = NULL,
  clusteringY = NULL,
  extraRegions = NULL,
  flankSizes = (25 * 2^(0:6)),
  ambiguityMethod = c("auto", " mean", "sum", "min", "max"),
  nomapValue = c("0", "NA", "nearest"),
  annotSeqnames = FALSE,
  annotBiotype = FALSE
)
}
\arguments{
\item{x}{A \link{GRanges} object for the genomic ranges to be extracted.}

\item{transcriptdb}{A \link{TxDb} or \link{EnsDb} object for the transcript annotation.}

\item{sequence}{A \link{BSgenome} or \link{XStringSet} object for the genome sequence. 
See the \link{available.genomes} function for how to install a genome.}

\item{gscores}{A \link{GScores} object specifying the genomic scores to be extracted, or a \code{list} of \code{GScores} for creating properties using more than one type of genomic scores.
See the vignette for more details: \code{vignette("GenomicScores", package = "GenomicScores")}.}

\item{clusteringY}{A \link{GRanges} or \link{GRangesList} specifying the object for clustering annotation, or a \code{list} of \code{GRanges}/\code{GRangesList} for creating clustering properties on more than one annotations.}

\item{extraRegions}{A \link{GRanges} or \link{GRangesList} providing the additional region to extract properties, can be a \code{list} of \code{GRanges} or \code{GRangesList} to supplement more than one regions.}

\item{flankSizes}{An \code{integer} vector indicating the number of bases flanked by \code{x} when calculating the \code{x} centered properties; default\code{=(25*2^(0:6))}.}

\item{ambiguityMethod}{By default, except the overlapping features, if \code{x[i]} overlaps multiple regions, the returned property will be the average of the properties over all overlapped regions by \code{x[i]}.
For the overlapping features, as long as x overlaps any range of the region, the returned value is 1 .

If \code{ambiguityMethod} is \code{"mean"}, \code{"sum"}, \code{"min"}, or \code{"max"}, then the mean, sum, minimum, and maximum values of the >1 mapping will be returned.}

\item{nomapValue}{When \code{nomapValue} is \code{"NA"} or \code{"0"}, the \code{x} that do not match the region will return \code{NA} and \code{0} respectively.

If \code{nomapValue} is \code{"nearest"}, the not matched \code{x} will be set to be the properties on its nearest region.}

\item{annotSeqnames}{\code{TRUE} or \code{FALSE}. If \code{TRUE}, the seqnames in \code{x} are output as features, with each level represented by a dummy variable column.}

\item{annotBiotype}{\code{TRUE} or \code{FALSE}. If \code{TRUE}, the transcript biotypes defined in the \code{EnsDb} are output as features, with each biotype represented by a dummy variable column.}
}
\value{
A \code{data.frame} object whose number of rows is the length of \code{x}.
The column types in the \code{data.frame} are all numeric.
}
\description{
A function to extract genome-derived features from the input \code{\link{GRanges}} object and the annotations specified by TxDb-like objects.
}
\details{
The function first extract multiple genomic properties/attributes on the 14 region types defined by the TxDb-like object, 
and then assign the attributes to \code{x} through the region closest to the instances of \code{x}. The specific behaviors of the assignments can be modified through the parameters of \code{ambiguityMethod} and \code{nomapValue}.

Particularly, the genome region types include \emph{\code{x}} (self), \emph{exons}, \emph{introns}, \emph{5'UTR} (exons only), \emph{full 5'UTR}, \emph{CDS} (exons only), \emph{full CDS}, 
\emph{3'UTR} (exons only), \emph{full 3'UTR}, \emph{mature transcripts}, \emph{full transcripts}, \emph{genes} (exons only), \emph{full genes}, and \emph{promoters}.

For each region type, the function can generate 5 types of basic properties accordingly: 
\emph{overlap with region},
\emph{region length}, 
\emph{relative position of \code{x} on the region}, 
\emph{distance to region 5'end}, and 
\emph{distance to region 3'end.}

In addition, when the corresponding annotation objects are provided, the function can add 5 more types of properties. 
Specifically, GC contents of regions are extracted if \code{sequence} is provided;
Genomic Scores of the regions are extracted if \code{gscores} is provided; and
Clustering effects of annotations on regions, including Count, Densities, and the Distance to the nearest annotation
are calculated if \code{clusteringY} is provided. 

More region types and properties can be extracted if the \code{list} of objects are supplied at the corresponding arguments \code{extraRegions}, \code{gscores}, and \code{clusteringY}. 
The names of the \code{list} elements will correspond to the labeling of the regions or properties in the column names of the returned table.

The returned properties and region types can be subsetted and augmented by with the arguments \code{properties}, \code{regions}, \code{supRegion}.

Finally, the function generate 3 extra features to describe the unique properties at the gene's level: 
\emph{gene's exon number}, 
\emph{gene's transcript isoform number}, and 
\emph{meta-tx topology}.
}
\examples{
## ---------------------------------------------------------------------
## SIMPLE EXAMPLE
## ---------------------------------------------------------------------

## Load the hg19 TxDb object for human transcript annotation (UCSC hg19):
library(TxDb.Hsapiens.UCSC.hg19.knownGene)

## Define the Granges to be extracted:
set.seed(01)

X <- GRanges(rep(c("chr1", "chr2"), c(15, 15)),
             IRanges(c(sample(11874:12127, 15), sample(38814:41527,15)), width=5),
             strand=Rle(c("+", "-"), c(15, 15)))

## Extract the basic set of properties using the genomic regions defined in TxDb:
gfeatures <- genomeDerivedFeatures(X,
                                   transcriptdb=TxDb.Hsapiens.UCSC.hg19.knownGene)
str(gfeatures)
             
## ---------------------------------------------------------------------
## DEFINE MORE PROPERTIES AND REGIONS
## ---------------------------------------------------------------------
\dontrun{
library(BSgenome.Hsapiens.UCSC.hg19)
library(phastCons100way.UCSC.hg19)

## Extract more genomic properties derived from genome sequence and phastCons score:
gfeatures_expanded <- genomeDerivedFeatures(X,
                                            transcriptdb=TxDb.Hsapiens.UCSC.hg19.knownGene,
                                            sequence=BSgenome.Hsapiens.UCSC.hg19,
                                            gscores=phastCons100way.UCSC.hg19,
                                            clusteringY=X) #quantify clustering properties of x itself
str(gfeatures_expanded) 
 
## Extract region properties features defined in Ensemble transcript annotation (EnsDb):
library(EnsDb.Hsapiens.v75)

gfeatures_ensdb <- genomeDerivedFeatures(X,
                                         transcriptdb=EnsDb.Hsapiens.v75,
                                         sequence=BSgenome.Hsapiens.UCSC.hg19,
                                         gscores=phastCons100way.UCSC.hg19,
                                         clusteringY=X,
                                         annotBiotype=TRUE) #extract transcript biotypes in EnsDb
str(gfeatures_ensdb)
}

}
\seealso{
\itemize{
\item{}{The \link{extractRegionProperty} for crafting of various properties on genomic regions.}
\item{}{The \link{sequenceDerivedFeatures} for extraction of sequence-derived features under different encoding schema.}
\item{}{The \link{topologyOnTranscripts} for calculation of the meta-tx topology on transcripts of genes.}
}
}
\author{
Zhen Wei
}
