PredictiveSequenceFeatures(X, Hsapiens, encoding = "onehot")
PredictiveSequenceFeatures(X, Hsapiens, encoding = "iRNA")
library(PredictiveFeatures)
knitr::opts_chunk$set(echo = TRUE)
Importance_matrix <- matrix(NA, nrow = ncol(rowData(m6Ads)), ncol = ncol(m6Ads))
knitr::opts_chunk$set(echo = TRUE)
library(BSgenome.Hsapiens.UCSC.hg19)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
genome_hg19 <- BSgenome.Hsapiens.UCSC.hg19
txdb_hg19 <- TxDb.Hsapiens.UCSC.hg19.knownGene
m6Ads <- readRDS("../m6Ads.rds")
all_DRACH <- RegionPropertiesFeatures::sampleSequence("DRACH", exons(txdb_hg19), genome_hg19)
library(phastCons100way.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(SummarizedExperiment)
rowData(m6Ads) <- RegionPropertiesFeatures::RegionPropertiesFeatures(rowRanges(m6Ads),
transcriptdb=txdb_hg19,
sequence=genome_hg19,
gscores=c(phastCons = phastCons100way.UCSC.hg19,
fitCons = fitCons.UCSC.hg19),
nomapValue = "auto",
clusteringY=c(DRACH = all_DRACH))
install.packages("~/RegionPropertiesFeatures_0.8.0.tar.gz", repos = NULL, type = "source")
knitr::opts_chunk$set(echo = TRUE)
library(BSgenome.Hsapiens.UCSC.hg19)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
genome_hg19 <- BSgenome.Hsapiens.UCSC.hg19
txdb_hg19 <- TxDb.Hsapiens.UCSC.hg19.knownGene
m6Ads <- readRDS("../m6Ads.rds")
all_DRACH <- RegionPropertiesFeatures::sampleSequence("DRACH", exons(txdb_hg19), genome_hg19)
library(phastCons100way.UCSC.hg19)
library(fitCons.UCSC.hg19)
rowData(m6Ads) <- RegionPropertiesFeatures::RegionPropertiesFeatures(rowRanges(m6Ads),
transcriptdb=txdb_hg19,
sequence=genome_hg19,
gscores=c(phastCons = phastCons100way.UCSC.hg19,
fitCons = fitCons.UCSC.hg19),
nomapValue = "auto",
clusteringY=c(DRACH = all_DRACH))
library(m6Ads)
library(SummarizedExperiment)
rowData(m6Ads) <- RegionPropertiesFeatures::RegionPropertiesFeatures(rowRanges(m6Ads),
transcriptdb=txdb_hg19,
sequence=genome_hg19,
gscores=c(phastCons = phastCons100way.UCSC.hg19,
fitCons = fitCons.UCSC.hg19),
nomapValue = "auto",
clusteringY=c(DRACH = all_DRACH))
rowData(m6Ads) <- cbind(rowData(m6Ads), RegionPropertiesFeatures::PredictiveSequenceFeatures(rowRanges(m6Ads)+20, Hsapiens, "iRNA"))
saveRDS(m6Ads, "../m6Ads.rds")
knitr::opts_chunk$set(echo = TRUE)
library(h2o)
h2o.init()
for( i in seq_len(N) ){
indx_i <- !is.na(assay(m6Ads)[,i])
Model_matrix_i <- rowData(m6Ads)[indx_i, ]
Model_matrix_i$Y <- as.factor(assay(m6Ads)[indx_i, i])
predictors <- setdiff(colnames(Model_matrix_i), "Y")
response <- "Y"
model_matrix <- as.h2o(Model_matrix_i)
# Train the XGB model
Model_i_xgb <- h2o.xgboost(x = predictors, y = response,
training_frame = model_matrix,
model_id = paste0("sample_",i),
nfolds = 5,
learn_rate = 0.05,
gamma = 5,
max_depth = 5,
reg_alpha = 10,
reg_lambda = 10,
colsample_bytree = 0.3,
booster = "gbtree",
normalize_type = "tree",
seed = 1234)
# Save the XGB model on disk
h2o.saveModel(Model_i_xgb, "/Users/zhen/Dropbox/GenomicFeatureX/m6A/MainCode/RPfeaturesModel")
}
N <- ncol(m6Ads)
for( i in seq_len(N) ){
indx_i <- !is.na(assay(m6Ads)[,i])
Model_matrix_i <- rowData(m6Ads)[indx_i, ]
Model_matrix_i$Y <- as.factor(assay(m6Ads)[indx_i, i])
predictors <- setdiff(colnames(Model_matrix_i), "Y")
response <- "Y"
model_matrix <- as.h2o(Model_matrix_i)
# Train the XGB model
Model_i_xgb <- h2o.xgboost(x = predictors, y = response,
training_frame = model_matrix,
model_id = paste0("sample_",i),
nfolds = 5,
learn_rate = 0.05,
gamma = 5,
max_depth = 5,
reg_alpha = 10,
reg_lambda = 10,
colsample_bytree = 0.3,
booster = "gbtree",
normalize_type = "tree",
seed = 1234)
# Save the XGB model on disk
h2o.saveModel(Model_i_xgb, "/Users/zhen/Dropbox/GenomicFeatureX/m6A/MainCode/RPfeaturesModel")
}
performance <- matrix(nrow = 5, ncol = N)
rownames(performance) <- c("AUC","AUCPR", "MCC_05", "MCC_max","max_threshold")
colnames(performance) <- paste0("sample_", seq_len(N))
for(i in seq_len(N)){
model_i <- h2o.loadModel(paste0("/Users/zhen/Dropbox/GenomicFeatureX/m6A/MainCode/RPfeaturesModel/sample_", i))
performance[1,i] <- h2o.auc(model_i, xval = TRUE)
performance[2,i] <- h2o.aucpr(model_i, xval = TRUE)
mcc_i <- as.data.frame(h2o.mcc(h2o.performance(model_i, xval = TRUE)))
performance[3,i] <- mcc_i$absolute_mcc[which.min(abs(mcc_i$threshold-0.5))]
performance[4,i] <- max(mcc_i$absolute_mcc)
performance[5,i] <- mcc_i$threshold[which.max(mcc_i$absolute_mcc)]
}
write.csv(performance, "cv.performance.RPfeaturesModel.csv")
WhistlefeaturesModel_metrics <- read.csv("cv.performance.WhistlefeaturesModel.csv")
RPfeaturesModel_metrics <- read.csv("cv.performance.RPfeaturesModel.csv")
plot_df_auroc <- data.frame(x = as.numeric(WhistlefeaturesModel_metrics[1,-1]),
y = as.numeric(RPfeaturesModel_metrics[1,-1]))
library(ggplot2)
ggplot(plot_df_auroc, aes(x = x, y = y))+geom_point(colour = "blue")+geom_abline(slope = 1,intercept = 0)+labs(x="AUROC Whistle", y="AUROC RPfeatures")+theme_classic()+scale_x_continuous(limits = c(0.75,0.92))+scale_y_continuous(limits = c(0.75,0.92))
Importance_matrix <- matrix(NA, nrow = ncol(rowData(m6Ads)), ncol = ncol(m6Ads))
rownames(Importance_matrix) <- colnames(rowData(m6Ads))
h2o.init()
for(i in seq_len(ncol(m6Ads))){
imp_i <- h2o.varimp(h2o.loadModel(paste0("/Users/zhen/Dropbox/GenomicFeatureX/m6A/MainCode/RPfeaturesModel/sample_",i)))
Importance_matrix[match(imp_i$variable, rownames(Importance_matrix)),i] <- imp_i$scaled_importance
}
write.csv(Importance_matrix, "Importance_matrix.csv")
Importance_matrix[is.na(Importance_matrix)] <- 0
Importance_matrix <- Importance_matrix[order(rowMeans(Importance_matrix),
decreasing = TRUE),]
colnames(Importance_matrix) <- m6Ads$Technique
pheatmap::pheatmap(Importance_matrix[1:50,], color = colorRampPalette(rev(brewer.pal(n = 7, name =
"Spectral")))(100), cluster_rows = FALSE, filename = "IMP_heatmap.pdf", width = 8, height = 10)
library(RColorBrewer)
pheatmap::pheatmap(Importance_matrix[1:50,], color = colorRampPalette(rev(brewer.pal(n = 7, name =
"Spectral")))(100), cluster_rows = FALSE, filename = "IMP_heatmap.pdf", width = 8, height = 10)
knitr::opts_chunk$set(echo = TRUE)
rowData(m6Ads) <- read.csv("RP2.csv")[,-1]
saveRDS(m6Ads, "../m6Ads.rds")
?RegionPropertiesFeatures::RegionPropertiesFeatures
library(SummarizedExperiment)
library(BSgenome.Hsapiens.UCSC.hg19)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
genome_hg19 <- BSgenome.Hsapiens.UCSC.hg19
txdb_hg19 <- TxDb.Hsapiens.UCSC.hg19.knownGene
m6Ads <- readRDS("../m6Ads.rds")
all_DRACH <- RegionPropertiesFeatures::sampleSequence("DRACH", exons(txdb_hg19), genome_hg19)
library(phastCons100way.UCSC.hg19)
library(fitCons.UCSC.hg19)
rowData(m6Ads) <- RegionPropertiesFeatures::RegionPropertiesFeatures(rowRanges(m6Ads),
transcriptdb=txdb_hg19,
sequence=genome_hg19,
gscores=c(phastCons = phastCons100way.UCSC.hg19,
fitCons = fitCons.UCSC.hg19),
clusteringY=c(DRACH = all_DRACH))
rowData(m6Ads) <- cbind(rowData(m6Ads), RegionPropertiesFeatures::PredictiveSequenceFeatures(rowRanges(m6Ads)+20, Hsapiens, "iRNA"))
saveRDS(m6Ads, "../m6Ads.rds")
knitr::opts_chunk$set(echo = TRUE)
for( i in seq_len(N) ){
indx_i <- !is.na(assay(m6Ads)[,i])
Model_matrix_i <- rowData(m6Ads)[indx_i, ]
Model_matrix_i$Y <- as.factor(assay(m6Ads)[indx_i, i])
predictors <- setdiff(colnames(Model_matrix_i), "Y")
response <- "Y"
model_matrix <- as.h2o(Model_matrix_i)
# Train the XGB model
Model_i_xgb <- h2o.xgboost(x = predictors, y = response,
training_frame = model_matrix,
model_id = paste0("sample_",i),
nfolds = 5,
learn_rate = 0.05,
gamma = 5,
max_depth = 5,
reg_alpha = 10,
reg_lambda = 10,
colsample_bytree = 0.3,
booster = "gbtree",
normalize_type = "tree",
seed = 1234)
# Save the XGB model on disk
h2o.saveModel(Model_i_xgb, "/Users/zhen/Dropbox/GenomicFeatureX/m6A/MainCode/RPfeaturesModel")
}
library(h2o)
h2o.init()
for( i in seq_len(N) ){
indx_i <- !is.na(assay(m6Ads)[,i])
Model_matrix_i <- rowData(m6Ads)[indx_i, ]
Model_matrix_i$Y <- as.factor(assay(m6Ads)[indx_i, i])
predictors <- setdiff(colnames(Model_matrix_i), "Y")
response <- "Y"
model_matrix <- as.h2o(Model_matrix_i)
# Train the XGB model
Model_i_xgb <- h2o.xgboost(x = predictors, y = response,
training_frame = model_matrix,
model_id = paste0("sample_",i),
nfolds = 5,
learn_rate = 0.05,
gamma = 5,
max_depth = 5,
reg_alpha = 10,
reg_lambda = 10,
colsample_bytree = 0.3,
booster = "gbtree",
normalize_type = "tree",
seed = 1234)
# Save the XGB model on disk
h2o.saveModel(Model_i_xgb, "/Users/zhen/Dropbox/GenomicFeatureX/m6A/MainCode/RPfeaturesModel")
}
library(RegionPropertiesFeatures)
?RegionPropertiesFeatures
?RegionPropertiesFeatures
library(RegionPropertiesFeatures)
?RegionPropertiesFeatures
library(RegionPropertiesFeatures)
## Load the hg19 TxDb object for human transcript annotation (UCSC hg19):
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
## Define the Granges to be annotated:
set.seed(01)
X <- GRanges(rep(c("chr1", "chr2"), c(15, 15)),
IRanges(c(sample(11874:12127, 15), sample(38814:41527,15)), width=5),
strand=Rle(c("+", "-"), c(15, 15)))
## Annotate the basic set of properties using the genomic regions defined in TxDb:
gfeatures <- RegionPropertiesFeatures(X,
transcriptdb=TxDb.Hsapiens.UCSC.hg19.knownGene)
cat("## --------------------------------------------------------------------------------------------------------------------------------------- ##\n", append=TRUE)
cat("##                                            Extracting properties on ", append=FALSE)
i = "ABC"
cat(paste0(paste0(rep(" ",64-nchar(i)), collapse = ""),"##\n"), append=FALSE)
library(RegionPropertiesFeatures)
## Load the hg19 TxDb object for human transcript annotation (UCSC hg19):
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
## Define the Granges to be annotated:
set.seed(01)
X <- GRanges(rep(c("chr1", "chr2"), c(15, 15)),
IRanges(c(sample(11874:12127, 15), sample(38814:41527,15)), width=5),
strand=Rle(c("+", "-"), c(15, 15)))
## Annotate the basic set of properties using the genomic regions defined in TxDb:
gfeatures <- RegionPropertiesFeatures(X,
transcriptdb=TxDb.Hsapiens.UCSC.hg19.knownGene)
## Load the hg19 TxDb object for human transcript annotation (UCSC hg19):
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
## Define the Granges to be annotated:
set.seed(01)
X <- GRanges(rep(c("chr1", "chr2"), c(15, 15)),
IRanges(c(sample(11874:12127, 15), sample(38814:41527,15)), width=5),
strand=Rle(c("+", "-"), c(15, 15)))
## Annotate the basic set of properties using the genomic regions defined in TxDb:
gfeatures <- RegionPropertiesFeatures(X,
transcriptdb=TxDb.Hsapiens.UCSC.hg19.knownGene,)
## Load the hg19 TxDb object for human transcript annotation (UCSC hg19):
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
## Define the Granges to be annotated:
set.seed(01)
X <- GRanges(rep(c("chr1", "chr2"), c(15, 15)),
IRanges(c(sample(11874:12127, 15), sample(38814:41527,15)), width=5),
strand=Rle(c("+", "-"), c(15, 15)))
## Annotate the basic set of properties using the genomic regions defined in TxDb:
gfeatures <- RegionPropertiesFeatures(X,
transcriptdb=TxDb.Hsapiens.UCSC.hg19.knownGene, extraRegions = exons(TxDb.Hsapiens.UCSC.hg19.knownGene))
library(RegionPropertiesFeatures)
## Load the hg19 TxDb object for human transcript annotation (UCSC hg19):
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
## Define the Granges to be annotated:
set.seed(01)
X <- GRanges(rep(c("chr1", "chr2"), c(15, 15)),
IRanges(c(sample(11874:12127, 15), sample(38814:41527,15)), width=5),
strand=Rle(c("+", "-"), c(15, 15)))
## Annotate the basic set of properties using the genomic regions defined in TxDb:
gfeatures <- RegionPropertiesFeatures(X,
transcriptdb=TxDb.Hsapiens.UCSC.hg19.knownGene, extraRegions = exons(TxDb.Hsapiens.UCSC.hg19.knownGene))
library(RegionPropertiesFeatures)
library(RegionPropertiesFeatures)
library(RegionPropertiesFeatures)
predictiveFeatures::predictiveFeaturesUsersGuide()
predictiveFeatures::predictiveFeaturesUsersGuide()
library(predictiveFeatures)
tools::texi2pdf()
tools::texi2pdf("/Users/zhen/Documents/GitHub/predictiveFeatures/inst/vignettes/Vignette_V_1.0.0.Rmd")
?extractRegionLength
library(predictiveFeatures)
library(PredictiveFeatures)
knitr::opts_chunk$set(fig.align = "left")
RPF <- genomeDerivedFeatures(GSE63753_abcam,
transcriptdb=txdb_hg19,
sequence=genome_hg19,
gscores=phastCons_hg19,
## Calculate clustering metrics on DRACH motif
clusteringY=list(DRACH=exons_DRACH))
GSE63753_abcam <- readRDS(system.file("extdata",
"GSE63753_abcam.rds",
package = "PredictiveFeatures"))
RPF <- genomeDerivedFeatures(GSE63753_abcam,
transcriptdb=txdb_hg19,
sequence=genome_hg19,
gscores=phastCons_hg19,
## Calculate clustering metrics on DRACH motif
clusteringY=list(DRACH=exons_DRACH))
("DRACH", exons(txdb_hg19), genome_hg19)
library(PredictiveFeatures)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
txdb_hg19 <- TxDb.Hsapiens.UCSC.hg19.knownGene
genome_hg19 <- BSgenome.Hsapiens.UCSC.hg19
phastCons_hg19 <- phastCons100way.UCSC.hg19
## retrieve all DRACH motif on the exonic regions of hg19
exons_DRACH <- sampleSequence("DRACH", exons(txdb_hg19), genome_hg19)
RPF <- genomeDerivedFeatures(GSE63753_abcam,
transcriptdb=txdb_hg19,
sequence=genome_hg19,
gscores=phastCons_hg19,
## Calculate clustering metrics on DRACH motif
clusteringY=list(DRACH=exons_DRACH))
width(GSE63753_abcam)
all(width(GSE63753_abcam)==1)
tail(width(GSE63753_abcam))
resize(GSE63753_abcam,1,fix = "center")
saveRDS(resize(GSE63753_abcam,1,fix = "center"),"/Users/zhen/Documents/GitHub/PredictiveFeatures/inst/extdata/GSE63753_abcam.rds")
GSE63753_abcam <- readRDS(system.file("extdata",
"GSE63753_sysy.rds",
package = "PredictiveFeatures"))
saveRDS(resize(GSE63753_abcam,1,fix = "center"),"/Users/zhen/Documents/GitHub/PredictiveFeatures/inst/extdata/GSE63753_sysy.rds")
rtracklayer::export(resize(GSE63753_sysy,1,fix = "center"),"/Users/zhen/Documents/GitHub/PredictiveFeatures/inst/extdata/GSE63753.bed")
## Load the exemplar annotation of m6A miCLIP dataset
GSE63753_sysy <- readRDS(system.file("extdata", "GSE63753_sysy.rds",
package = "PredictiveFeatures"))
rtracklayer::export(resize(GSE63753_sysy,1,fix = "center"),"/Users/zhen/Documents/GitHub/PredictiveFeatures/inst/extdata/GSE63753.bed")
data.frame(GSE63753_sysy)
write.table(data.frame(GSE63753_sysy), "/Users/zhen/Documents/GitHub/PredictiveFeatures/inst/extdata/GSE63753.txt")
write.table(data.frame(GSE63753_sysy), "/Users/zhen/Documents/GitHub/PredictiveFeatures/inst/extdata/GSE63753.txt", sep = "/t")
write.table(resize(GSE63753_sysy,1,fix = "center"), "/Users/zhen/Documents/GitHub/PredictiveFeatures/inst/extdata/GSE63753.txt", sep = "/t")
write.table(resize(GSE63753_sysy,1,fix = "center"), "/Users/zhen/Documents/GitHub/PredictiveFeatures/inst/extdata/GSE63753.txt", sep = "\t")
write.table(resize(GSE63753_sysy,1,fix = "center"), "/Users/zhen/Documents/GitHub/PredictiveFeatures/inst/extdata/GSE63753.txt", sep = "\t", row.names = FALSE)
write.table(resize(GSE63753_sysy[GSE63753_sysy$target==1],1,fix = "center"), "/Users/zhen/Documents/GitHub/PredictiveFeatures/inst/extdata/GSE63753.txt", sep = "\t", row.names = FALSE)
rtracklayer::export(resize(GSE63753_sysy[GSE63753_sysy$target==1],1,fix = "center"),"/Users/zhen/Documents/GitHub/PredictiveFeatures/inst/extdata/GSE63753.bed")
PseTNC <- sequenceDerivedFeatures(resize(GSE63753_abcam, 41, fix="center"),
## Providing the genome sequence
sequence=genome_hg19,
encoding = "iRNA")
knitr::opts_chunk$set(fig.align = "left")
library(PredictiveFeatures)
library(GenomicRanges)
bed_dir <- system.file("extdata", "GSE63753.bed",
package = "PredictiveFeatures")
X <- rtracklayer::import(bed_dir)
library(GenomicRanges)
tsv_dir <- system.file("extdata", "GSE63753.txt",
package = "PredictiveFeatures")
X_df <- read.table(tsv_dir, sep = "\t", header = TRUE)
X <- GRanges(seqnames = X_df[,1],
ranges = IRanges(start = X_df[,2],
end = X_df[,3]),
strand = X_df[,5])
X
library(PredictiveFeatures)
library(TxDb.Hsapiens.UCSC.hg19.knownGene) ##Load Txdb package
library(BSgenome.Hsapiens.UCSC.hg19) ##Load BSgenome package
library(phastCons100way.UCSC.hg19) ##Load GScores package
knitr::opts_chunk$set(fig.align = "left")
txdb_hg19 <- TxDb.Hsapiens.UCSC.hg19.knownGene
genome_hg19 <- BSgenome.Hsapiens.UCSC.hg19
phastCons_hg19 <- phastCons100way.UCSC.hg19
RPF <- genomeDerivedFeatures(X,
## Providing gene annotation
transcriptdb=txdb_hg19,
## Providing genome sequence
sequence=genome_hg19,
## Providing Phastcons scores
gscores=phastCons_hg19,
## Calculate clustering metrics on X itself
clusteringY=X)
str(RPF) ## Verify the outcome of feature extraction
head(str(RPF)) ## Verify the outcome of feature extraction
dim(RPF) ## Verify the outcome of feature extraction
colnames(RPF)
head(RPF)
?str
str(RPF)
saveRDS(RPF, "Objects/RPF_188")
saveRDS(RPF, "Objects/RPF_188.rds")
eval(readRDS("Objects/RPF_188.rds"))
?BiocStyle::pdf_document
library(PredictiveFeatures)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
txdb_hg19 <- TxDb.Hsapiens.UCSC.hg19.knownGene
genome_hg19 <- BSgenome.Hsapiens.UCSC.hg19
phastCons_hg19 <- phastCons100way.UCSC.hg19
exons_DRACH <- sampleSequence("DRACH", exons(txdb_hg19), genome_hg19)
RPF <- genomeDerivedFeatures(GSE63753_abcam,
transcriptdb=txdb_hg19,
sequence=genome_hg19,
gscores=phastCons_hg19,
## Calculate clustering metrics on DRACH motif
clusteringY=list(DRACH=exons_DRACH))
library(PredictiveFeatures)
knitr::opts_chunk$set(fig.align = "left")
exons_DRACH <- sampleSequence("DRACH", exons(txdb_hg19), genome_hg19)
library(PredictiveFeatures)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
txdb_hg19 <- TxDb.Hsapiens.UCSC.hg19.knownGene
genome_hg19 <- BSgenome.Hsapiens.UCSC.hg19
phastCons_hg19 <- phastCons100way.UCSC.hg19
exons_DRACH <- sampleSequence("DRACH", exons(txdb_hg19), genome_hg19)
RPF <- genomeDerivedFeatures(GSE63753_abcam,
transcriptdb=txdb_hg19,
sequence=genome_hg19,
gscores=phastCons_hg19,
## Calculate clustering metrics on DRACH motif
clusteringY=list(DRACH=exons_DRACH))
PseTNC <- sequenceDerivedFeatures(resize(GSE63753_abcam, 41, fix="center"),
## Providing the genome sequence
sequence=genome_hg19,
encoding = "iRNA")
Model_matrix <- cbind(RPF,PseTNC)
Model_matrix$target <- as.factor(GSE63753_abcam$target)
saveRDS(Model_matrix, "Model_matrix.rds")
library(h2o)
h2o.init()
?h2o.init()
h2o.shutdown()
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-zermelo/3/R")
# Finally, let's load H2O and start up an H2O cluster
library(h2o)
h2o.init()
knitr::opts_chunk$set(echo = TRUE)
Report <- read.csv("MB_LabReport.csv")
Mean_df <- data.frame(Name = Report$Full.name,
ID = Report$ID.number,
Reverse_Name = sapply(strsplit(Report$Full.name, " "), function(x)paste(x[2], x[1])),
Grade = Report$Grade)
Mean_df[order(Mean_df$Reverse_Name),]
Mean_df2 <- data.frame(Name = P3D$Full.name,
ID = P3D$ID.number,
Reverse_Name = sapply(strsplit(P3D$Full.name, " "), function(x)paste(x[2], x[1])),
ImputedReport = Report$Grade,
ImputedFinal = rowMeans(Total_Grade)
)
library(h2o)
h2o.init()
predictors <- setdiff("target", colnames(Model_matrix))
model_matrix <- as.h2o(Model_matrix)
## Train the XGB model with 5 folds cross validation
model_xgb <- h2o.xgboost(x = predictors, y = "target",
training_frame = model_matrix,
nfolds = 5,
learn_rate = 0.05,
gamma = 5,
max_depth = 5,
reg_alpha = 10,
reg_lambda = 10,
colsample_bytree = 0.3,
booster = "gbtree",
normalize_type = "tree",
seed = 1234)
predictors
colnames(Model_matrix)
predictors <- setdiff("target", colnames(Model_matrix))
predictors
predictors <- setdiff(colnames(Model_matrix), "target")
model_matrix <- as.h2o(Model_matrix)
## Train the XGB model with 5 folds cross validation
model_xgb <- h2o.xgboost(x = predictors, y = "target",
training_frame = model_matrix,
nfolds = 5,
learn_rate = 0.05,
gamma = 5,
max_depth = 5,
reg_alpha = 10,
reg_lambda = 10,
colsample_bytree = 0.3,
booster = "gbtree",
normalize_type = "tree",
seed = 1234)
model_xgb
h2o.varimp_plot(model_xgb)
h2o.saveModel(model_xgb,"model_xgb")
model_xgb <- h2o.loadModel("/Users/zhen/Documents/GitHub/PredictiveFeatures/model_xgb/XGBoost_model_R_1611894411926_2")
```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(h2o)
h2o.init()
model_xgb <- h2o.loadModel("/Users/zhen/Documents/GitHub/PredictiveFeatures/model_xgb/XGBoost_model_R_1611894411926_2")
h2o.performance(model_xgb)
?model_xgb
?h2o.performance
??h2o.performance
texi2dvi(xjtlu)
?texi2dvi
library(tinytex)
tlmgr_search('framed.sty')  # 搜索包含 framed.sty 文件的 LaTeX 包
tlmgr_install('framed')     # 安装 framed 包
tlmgr_update()
devtools::install_github("yihui/tinytex")
?tools::texi2pdf()
library(WhistleR)
library(WhistleR)
devtools::install_github("yihui/tinytex")
?WhistleR
